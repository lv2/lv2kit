stages: [build]

variables:
  GIT_SUBMODULE_STRATEGY: normal

.build_template: &build_definition
  stage: build
  artifacts:
    paths: ["build/", ".lock-waf*"]

.test_template: &test_definition
  stage: test
  artifacts:
    paths: [build/coverage]


arm32_dbg:
  <<: *build_definition
  image: lv2plugin/debian-arm32
  script:
    - python3 ./waf configure build test -v -ST --werror --no-bindings --no-coverage --wrapper=qemu-arm-static
  variables:
    AR: "arm-linux-gnueabihf-ar"
    CC: "arm-linux-gnueabihf-gcc"
    CFLAGS: "-O0 -g -D_FILE_OFFSET_BITS=64"
    CXX: "arm-linux-gnueabihf-g++"
    CXXFLAGS: "-O0 -g -D_FILE_OFFSET_BITS=64"

arm32_rel:
  <<: *build_definition
  image: lv2plugin/debian-arm32
  script:
    - python3 ./waf configure build test -ST --werror --no-bindings --no-coverage --wrapper=qemu-arm-static
  variables:
    AR: "arm-linux-gnueabihf-ar"
    CC: "arm-linux-gnueabihf-gcc"
    CFLAGS: "-O2 -DNDEBUG -D_FILE_OFFSET_BITS=64"
    CXX: "arm-linux-gnueabihf-g++"
    CXXFLAGS: "-O2 -DNDEBUG -D_FILE_OFFSET_BITS=64"


arm64_dbg:
  <<: *build_definition
  image: lv2plugin/debian-arm64
  script:
    - python3 ./waf configure build test -dST --werror --no-bindings --no-coverage --wrapper=qemu-aarch64-static
  variables:
    AR: "aarch64-linux-gnu-ar"
    CC: "aarch64-linux-gnu-gcc"
    CXX: "aarch64-linux-gnu-g++"

arm64_rel:
  <<: *build_definition
  image: lv2plugin/debian-arm64
  script:
    - python3 ./waf configure build test -ST --werror --no-bindings --no-coverage --wrapper=qemu-aarch64-static
  variables:
    AR: "aarch64-linux-gnu-ar"
    CC: "aarch64-linux-gnu-gcc"
    CXX: "aarch64-linux-gnu-g++"


x64_dbg:
  <<: *build_definition
  image: lv2plugin/debian-x64
  script:
    - python3 ./waf configure build test -dST --werror

x64_rel:
  <<: *build_definition
  image: lv2plugin/debian-x64
  script:
    - python3 ./waf configure build test -ST --werror


x64_sanitize:
  <<: *build_definition
  image: lv2plugin/debian-x64-clang
  script:
    - python3 ./waf configure build test -ST --werror --no-coverage --no-bindings --no-coverage
  variables:
    CC: "clang"
    CFLAGS: "-fsanitize=address -fsanitize=undefined -fsanitize=float-divide-by-zero -fsanitize=unsigned-integer-overflow -fsanitize=implicit-conversion -fsanitize=local-bounds -fsanitize=nullability"
    CXX: "clang++"
    CXXFLAGS: "-fsanitize=address -fsanitize=undefined -fsanitize=float-divide-by-zero -fsanitize=unsigned-integer-overflow -fsanitize=implicit-conversion -fsanitize=local-bounds -fsanitize=nullability"
    LINKFLAGS: "-fsanitize=address -fsanitize=undefined -fsanitize=float-divide-by-zero -fsanitize=unsigned-integer-overflow -fsanitize=implicit-conversion -fsanitize=local-bounds -fsanitize=nullability"


# TODO: Run tests on MinGW


mingw32_dbg:
  <<: *build_definition
  image: lv2plugin/debian-mingw32
  script:
    - python3 ./waf configure build -dST --werror --no-coverage --wrapper=wine
  variables:
    AR: "i686-w64-mingw32-ar"
    CC: "i686-w64-mingw32-gcc"
    CXX: "i686-w64-mingw32-g++"

mingw32_rel:
  <<: *build_definition
  image: lv2plugin/debian-mingw32
  script:
    - python3 ./waf configure build -ST --werror --no-coverage --wrapper=wine
  variables:
    AR: "i686-w64-mingw32-ar"
    CC: "i686-w64-mingw32-gcc"
    CXX: "i686-w64-mingw32-g++"


mingw64_dbg:
  <<: *build_definition
  image: lv2plugin/debian-mingw64
  script:
    - python3 ./waf configure build -dST --werror --no-coverage --wrapper=wine
  variables:
    AR: "x86_64-w64-mingw32-ar"
    CC: "x86_64-w64-mingw32-gcc"
    CXX: "x86_64-w64-mingw32-g++"

mingw64_rel:
  <<: *build_definition
  image: lv2plugin/debian-mingw64
  script:
    - python3 ./waf configure build -ST --werror --no-coverage --wrapper=wine
  variables:
    AR: "x86_64-w64-mingw32-ar"
    CC: "x86_64-w64-mingw32-gcc"
    CXX: "x86_64-w64-mingw32-g++"


mac_dbg:
  <<: *build_definition
  script:
    - python ./waf configure build test -dST --werror --no-coverage
  tags: [macos]

mac_rel:
  <<: *build_definition
  script:
    - python ./waf configure build test -ST --werror --no-coverage
  tags: [macos]


win_dbg:
  <<: *build_definition
  script:
    - python3 ./waf configure build test -dST --werror --no-coverage
  tags: [windows,msvc,python]

win_rel:
  <<: *build_definition
  script:
    - python3 ./waf configure build test -ST --werror --no-coverage
  tags: [windows,msvc,python]
